{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":91720,"databundleVersionId":13345277,"sourceType":"competition"}],"dockerImageVersionId":31090,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nfrom catboost import CatBoostRegressor, Pool\nfrom sklearn.model_selection import KFold\nfrom sklearn.metrics import mean_squared_error\nimport matplotlib.pyplot as plt\n\n# 1. Load data\ntrain = pd.read_csv('/kaggle/input/playground-series-s5e9/train.csv')\ntest = pd.read_csv('/kaggle/input/playground-series-s5e9/test.csv')\n\n# 2. Prepare features and target\nX = train.drop(['id', 'BeatsPerMinute'], axis=1)\ny = train['BeatsPerMinute']\nX_test = test.drop(['id'], axis=1)\n\n# 3. Define CatBoost params\nparams = {\n    'iterations': 5000,\n    'learning_rate': 0.05,\n    'depth': 7,\n    'eval_metric': 'RMSE',\n    'random_seed': 42,\n    'early_stopping_rounds': 100,\n    'verbose': 200,\n    'task_type': 'GPU',  # or 'CPU' if no GPU available\n}\n\n# 4. Cross-validation to find best iterations\nkf = KFold(n_splits=5, shuffle=True, random_state=42)\ncv_rmse = []\n\nfor fold, (train_idx, val_idx) in enumerate(kf.split(X)):\n    X_train, X_val = X.iloc[train_idx], X.iloc[val_idx]\n    y_train, y_val = y.iloc[train_idx], y.iloc[val_idx]\n\n    train_pool = Pool(X_train, y_train)\n    val_pool = Pool(X_val, y_val)\n\n    model = CatBoostRegressor(**params)\n    model.fit(train_pool, eval_set=val_pool, use_best_model=True)\n\n    preds = model.predict(X_val)\n    rmse = mean_squared_error(y_val, preds, squared=False)\n    print(f\"Fold {fold + 1} RMSE: {rmse:.4f}\")\n    cv_rmse.append(rmse)\n\nprint(f\"\\nAverage CV RMSE: {np.mean(cv_rmse):.4f}\")\n\n# 5. Train final model on full data with best iteration\nfinal_model = CatBoostRegressor(**params)\nfinal_model.fit(X, y)\n\n# 6. Predict on test set\npredictions = final_model.predict(X_test)\n\n# 7. Prepare submission\nsubmission = pd.DataFrame({\n    'id': test['id'],\n    'BeatsPerMinute': predictions\n})\nsubmission.to_csv('submission.csv', index=False)\nprint(\"Submission saved as submission_catboost.csv\")\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-09-23T14:06:07.111138Z","iopub.execute_input":"2025-09-23T14:06:07.111668Z","iopub.status.idle":"2025-09-23T14:06:42.296791Z","shell.execute_reply.started":"2025-09-23T14:06:07.111636Z","shell.execute_reply":"2025-09-23T14:06:42.296052Z"}},"outputs":[{"name":"stdout","text":"0:\tlearn: 26.4723061\ttest: 26.4445788\tbest: 26.4445788 (0)\ttotal: 5.49ms\tremaining: 27.4s\nbestTest = 26.43855852\nbestIteration = 45\nShrink model to first 46 iterations.\nFold 1 RMSE: 26.4386\n0:\tlearn: 26.4606055\ttest: 26.4917170\tbest: 26.4917170 (0)\ttotal: 5.7ms\tremaining: 28.5s\n200:\tlearn: 26.3820531\ttest: 26.4852507\tbest: 26.4837654 (103)\ttotal: 913ms\tremaining: 21.8s\nbestTest = 26.4837654\nbestIteration = 103\nShrink model to first 104 iterations.\nFold 2 RMSE: 26.4838\n0:\tlearn: 26.4507447\ttest: 26.5310137\tbest: 26.5310137 (0)\ttotal: 5.48ms\tremaining: 27.4s\nbestTest = 26.52357883\nbestIteration = 71\nShrink model to first 72 iterations.\nFold 3 RMSE: 26.5236\n0:\tlearn: 26.4703487\ttest: 26.4534250\tbest: 26.4534250 (0)\ttotal: 5.75ms\tremaining: 28.8s\nbestTest = 26.44427295\nbestIteration = 61\nShrink model to first 62 iterations.\nFold 4 RMSE: 26.4443\n0:\tlearn: 26.4797411\ttest: 26.4150214\tbest: 26.4150214 (0)\ttotal: 5.85ms\tremaining: 29.3s\nbestTest = 26.40756681\nbestIteration = 60\nShrink model to first 61 iterations.\nFold 5 RMSE: 26.4076\n\nAverage CV RMSE: 26.4595\n0:\tlearn: 26.4667754\ttotal: 5.89ms\tremaining: 29.4s\n200:\tlearn: 26.4007528\ttotal: 1s\tremaining: 24s\n400:\tlearn: 26.3475807\ttotal: 2s\tremaining: 22.9s\n600:\tlearn: 26.2981909\ttotal: 2.99s\tremaining: 21.9s\n800:\tlearn: 26.2509967\ttotal: 3.96s\tremaining: 20.7s\n1000:\tlearn: 26.2059284\ttotal: 4.93s\tremaining: 19.7s\n1200:\tlearn: 26.1630891\ttotal: 5.92s\tremaining: 18.7s\n1400:\tlearn: 26.1215562\ttotal: 6.91s\tremaining: 17.7s\n1600:\tlearn: 26.0805423\ttotal: 7.9s\tremaining: 16.8s\n1800:\tlearn: 26.0401309\ttotal: 8.88s\tremaining: 15.8s\n2000:\tlearn: 26.0008189\ttotal: 9.88s\tremaining: 14.8s\n2200:\tlearn: 25.9622351\ttotal: 10.9s\tremaining: 13.8s\n2400:\tlearn: 25.9249527\ttotal: 11.8s\tremaining: 12.8s\n2600:\tlearn: 25.8878242\ttotal: 12.8s\tremaining: 11.8s\n2800:\tlearn: 25.8514216\ttotal: 13.8s\tremaining: 10.8s\n3000:\tlearn: 25.8157729\ttotal: 14.8s\tremaining: 9.83s\n3200:\tlearn: 25.7810388\ttotal: 15.7s\tremaining: 8.84s\n3400:\tlearn: 25.7456768\ttotal: 16.7s\tremaining: 7.86s\n3600:\tlearn: 25.7121242\ttotal: 17.7s\tremaining: 6.88s\n3800:\tlearn: 25.6792267\ttotal: 18.7s\tremaining: 5.89s\n4000:\tlearn: 25.6467464\ttotal: 19.6s\tremaining: 4.91s\n4200:\tlearn: 25.6142893\ttotal: 20.6s\tremaining: 3.92s\n4400:\tlearn: 25.5822015\ttotal: 21.6s\tremaining: 2.94s\n4600:\tlearn: 25.5497628\ttotal: 22.6s\tremaining: 1.96s\n4800:\tlearn: 25.5183941\ttotal: 23.6s\tremaining: 976ms\n4999:\tlearn: 25.4874623\ttotal: 24.5s\tremaining: 0us\nSubmission saved as submission_catboost.csv\n","output_type":"stream"}],"execution_count":2}]}